#!/usr/bin/env python3
import sys, logging, os, datetime, envdir, argparse
from utils.redcap import init_project, get_redcap_report, format_longitudinal
from utils.common import DE_EXPORT_COLS, LOGISTICS_S3_BUCKET, LOGISTICS_DE_PATH, format_id, export_orders
from utils.cascadia import filter_cascadia_orders
from utils.airs import filter_airs_orders
from utils.hct import filter_hct_orders
import pandas as pd

# Place all modules within this script's path
BASE_DIR = os.path.abspath(__file__ + "/../../")
sys.path.append(BASE_DIR)

from etc.ordering_script_config_map import PROJECT_DICT

# Set up envdir
envdir.open(os.path.join(BASE_DIR, '.env/redcap'))

# Set up logging
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
logging.basicConfig()
LOG = logging.getLogger(__name__)
LOG.setLevel(LOG_LEVEL)


def main(args):
    '''Gets orders from redcap and combine them in a csv file'''
    order_export = pd.DataFrame(columns=DE_EXPORT_COLS, dtype='string')

    for project in PROJECT_DICT:
        LOG.info(f'Generating Kit Orders for <{project}>')

        redcap_project = init_project(project)
        orders = get_redcap_report(redcap_project, project)
        enrollment_records = get_redcap_report(redcap_project, project, 2401) if project == 'Cascadia' else None

        num_orders = len(orders.index.get_level_values(0))
        LOG.info(f'Started with <{num_orders}> possible new kit orders in <{project}>.')

        if num_orders:
            orders = format_longitudinal(orders, project)

            if project == 'HCT':
                orders = filter_hct_orders(orders)

            elif project == 'AIRS':
                orders = filter_airs_orders(orders)

            elif project == 'Cascadia':
                orders = filter_cascadia_orders(orders, enrollment_records)

            orders = format_id(orders, project)

            # Some columns can be typed as a float64 (X.X) which causes issues with the
            # import to delivery express. Downcast those columns.
            orders['Today Tomorrow'] = pd.to_numeric(
                orders['Today Tomorrow'], downcast='integer'
            )
            orders['Zipcode'] = pd.to_numeric(
                orders['Zipcode'], downcast='integer'
            )

            # Subset orders by export desired columns
            orders = orders[
                orders.columns.intersection(DE_EXPORT_COLS)
            ]

            LOG.debug(f'Appending <{len(orders)}> from <{project}> to the order sheet.')
            order_export = pd.concat([order_export, orders], ignore_index=True)

            LOG.info(f'<{len(order_export)}> total orders after concatenation of <{project}> orders.')
        else:
            LOG.info(f'Skipping orders for <{project}>, nothing in the report. <{len(order_export)}> total orders.')

    # format the apt number nicely if it exists
    order_export['Apt Number'] = order_export['Apt Number'].apply(
        lambda x: f' {x}' if not pd.isna(x) else pd.NA
    )

    LOG.info(f"Summary of orders generated by this run: \n \
            {order_export.groupby(['Project Name']).size().reset_index(name='counts')}")

    outfile_name = f'DeliveryExpressOrder{datetime.datetime.now().strftime("%Y_%m_%d_%H_%M")}.csv'

    if args.save:
        export_orders(order_export, os.path.join(BASE_DIR, f'data/{outfile_name}'))
        LOG.info(f'Successfully saved orders to <{os.path.join(BASE_DIR, f"data/{outfile_name}")}>.')
    else:
        LOG.debug(f"Skipping order save to disk with <--save={args.save}.>")

    if args.s3_upload:
        export_orders(order_export, f's3://{LOGISTICS_S3_BUCKET}/{LOGISTICS_DE_PATH}/{outfile_name}', s3=True)
        LOG.info(f'Successfully uploaded DE orders to <{LOGISTICS_S3_BUCKET}/{LOGISTICS_DE_PATH}/{outfile_name}>')
    else:
        LOG.debug(f'Skipping order upload to S3 with <--s3-upload={args.s3_upload}>.')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate and upload a delivery express order form for studies needing kit pickups.')
    parser.add_argument('--save', action='store_true', help='Flag to indicate the order form should be saved to the data directory.')
    parser.add_argument('--s3-upload', action='store_true', help='Flag to indicate the order form should be uploaded to S3.')

    main(parser.parse_args())
