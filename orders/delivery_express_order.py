#!/usr/bin/env python3
import sys, logging, os, datetime
from utils.redcap import init_project, get_redcap_report, format_longitudinal
from utils.common import DE_EXPORT_COLS, format_id, export_orders
import pandas as pd
import envdir

# Place all modules within this script's path
BASE_DIR = os.path.abspath(__file__ + "/../../")
sys.path.append(BASE_DIR)

from etc.ordering_script_config_map import PROJECT_DICT

# Set up envdir
envdir.open(os.path.join(BASE_DIR, '.env/redcap'))

# Set up logging
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
logging.basicConfig()
LOG = logging.getLogger(__name__)
LOG.setLevel(LOG_LEVEL)


def main():
    '''Gets orders from redcap and combine them in a csv file'''
    order_export = pd.DataFrame(columns=DE_EXPORT_COLS, dtype='string')

    for project in PROJECT_DICT:
        LOG.info(f'Generating Kit Orders for <{project}>')

        # TODO: Overhaul this error handling method into something more robust
        try:
            redcap_project = init_project(project)
            project_orders = get_redcap_report(redcap_project, project)
        except Exception as err:
            LOG.error(f'Failed to generate Kit Orders for <{project}>')
            LOG.error(f'{err}', exc_info=1)
            continue

        orders = len(project_orders.index.get_level_values(0).unique())
        LOG.info(f'Started with <{orders}> possible new kit orders in <{project}>.')

        if orders:
            project_orders = format_longitudinal(project_orders, project)
            project_orders = format_id(project_orders, project)

            # Some columns can be typed as a float64 (X.X) which causes issues with the
            # import to delivery express. Downcast those columns.
            project_orders['Today Tomorrow'] = pd.to_numeric(
                project_orders['Today Tomorrow'], downcast='integer'
            )
            project_orders['Zipcode'] = pd.to_numeric(
                project_orders['Zipcode'], downcast='integer'
            )

            # Subset orders by export desired columns
            project_orders = project_orders[
                project_orders.columns.intersection(DE_EXPORT_COLS)
            ]

            LOG.debug(f'Appending <{len(project_orders)}> from <{project}> to the order sheet.')
            order_export = pd.concat([order_export, project_orders], ignore_index=True)

            LOG.info(f'<{len(order_export)}> total orders after concatenation of <{project}> orders.')
        else:
            LOG.info(f'Skipping orders for <{project}>, nothing in the report. <{len(order_export)}> total orders.')

    # format the apt number nicely if it exists
    order_export['Apt Number'] = order_export['Apt Number'].apply(
        lambda x: f' {x}' if not pd.isna(x) else pd.NA
    )

    export_orders(order_export, os.path.join(BASE_DIR, f'data/DeliveryExpressOrder{datetime.datetime.now().strftime("%Y_%m_%d_%H_%M")}.csv'))

    LOG.info(f"Orders saved. Summary of orders generated by this run: \n \
        {order_export.groupby(['Project Name']).size().reset_index(name='counts')}")


if __name__ == "__main__":
    main()
